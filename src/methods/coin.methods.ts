import { executeQuery } from "../utils/queryExecutor";
import { ICoin } from '../types';

/*
-- Generated by the database client.
CREATE TABLE coins(
    coin_id varchar(255) NOT NULL,
    coin_type_legacy varchar(255),
    coin_address_fungible varchar(255),
    coin_name varchar(255),
    coin_symbol varchar(255),
    coin_defyapp_symbol varchar(255),
    coin_decimals integer NOT NULL,
    coin_description text,
    coin_logo_url varchar(255),
    coingecko_id varchar(255),
    coinmarketcap_id varchar(255),
    is_graduated varchar(255),
    bonding_curve_progress integer,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    PRIMARY KEY(coin_id)
);
*/

export const addCoinIfNotExists = async (coinData: ICoin): Promise<ICoin[]> => {
  const query = `
    INSERT INTO coins (coin_id, coin_type_legacy, coin_address_fungible, coin_name, coin_symbol, coin_defyapp_symbol, coin_decimals, coin_description, coin_logo_url, coingecko_id, coinmarketcap_id, is_graduated, bonding_curve_progress)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
    ON CONFLICT (coin_id)
    DO NOTHING
    RETURNING *;
  `;
  return executeQuery<ICoin>(
    query,
    [
      coinData.coin_id,
      coinData.coin_type_legacy,
      coinData.coin_address_fungible,
      coinData.coin_name,
      coinData.coin_symbol,
      coinData.coin_defyapp_symbol,
      coinData.coin_decimals,
      coinData.coin_description,
      coinData.coin_logo_url,
      coinData.coingecko_id,
      coinData.coinmarketcap_id,
      coinData.is_graduated,
      coinData.bonding_curve_progress,
    ],
    true
  );
};

export const addMultipleCoins = async (coinsData: ICoin[]): Promise<ICoin[]> => {
  const query = `
    INSERT INTO coins (coin_id, coin_type_legacy, coin_address_fungible, coin_name, coin_symbol, coin_defyapp_symbol, coin_decimals, coin_description, coin_logo_url, coingecko_id, coinmarketcap_id, is_graduated, bonding_curve_progress)
    VALUES ${coinsData
      .map(
        (_, index) =>
          `($${index * 13 + 1}, $${index * 13 + 2}, $${index * 13 + 3}, $${
            index * 13 + 4
          }, $${index * 13 + 5}, $${index * 13 + 6}, $${index * 13 + 7}, $${
            index * 13 + 8
          }, $${index * 13 + 9}, $${index * 13 + 10}, $${index * 13 + 11}, $${
            index * 13 + 12
          }, $${index * 13 + 13})`
      )
      .join(", ")}
    ON CONFLICT (coin_id)
    DO NOTHING
    RETURNING *;
  `;
  const values = coinsData.reduce<any[]>((acc, coin) => {
    acc.push(coin.coin_id);
    acc.push(coin.coin_type_legacy);
    acc.push(coin.coin_address_fungible);
    acc.push(coin.coin_name);
    acc.push(coin.coin_symbol);
    acc.push(coin.coin_defyapp_symbol);
    acc.push(coin.coin_decimals);
    acc.push(coin.coin_description);
    acc.push(coin.coin_logo_url);
    acc.push(coin.coingecko_id);
    acc.push(coin.coinmarketcap_id);
    acc.push(coin.is_graduated);
    acc.push(coin.bonding_curve_progress);
    return acc;
  }, []);
  return executeQuery<ICoin>(query, values, true);
};

export const addMultipleCoinsOrUpdate = async (coinsData: ICoin[]): Promise<ICoin[]> => {
  const query = `
    INSERT INTO coins (coin_id, coin_type_legacy, coin_address_fungible, coin_name, coin_symbol, coin_defyapp_symbol, coin_decimals, coin_description, coin_logo_url, coingecko_id, coinmarketcap_id, is_graduated, bonding_curve_progress)
    VALUES ${coinsData
      .map(
        (_, index) =>
          `($${index * 13 + 1}, $${index * 13 + 2}, $${index * 13 + 3}, $${
            index * 13 + 4
          }, $${index * 13 + 5}, $${index * 13 + 6}, $${index * 13 + 7}, $${
            index * 13 + 8
          }, $${index * 13 + 9}, $${index * 13 + 10}, $${index * 13 + 11}, $${
            index * 13 + 12
          }, $${index * 13 + 13})`
      )
      .join(", ")}
    ON CONFLICT (coin_id)
    DO UPDATE SET
      coin_type_legacy = EXCLUDED.coin_type_legacy,
      coin_address_fungible = EXCLUDED.coin_address_fungible,
      coin_name = EXCLUDED.coin_name,
      coin_symbol = EXCLUDED.coin_symbol,
      coin_defyapp_symbol = EXCLUDED.coin_defyapp_symbol,
      coin_decimals = EXCLUDED.coin_decimals,
      coin_description = EXCLUDED.coin_description,
      coin_logo_url = EXCLUDED.coin_logo_url,
      coingecko_id = EXCLUDED.coingecko_id,
      coinmarketcap_id = EXCLUDED.coinmarketcap_id,
      is_graduated = EXCLUDED.is_graduated,
      bonding_curve_progress = EXCLUDED.bonding_curve_progress,
      updated_at = NOW()
    RETURNING *;
  `;
  const values = coinsData.reduce<any[]>((acc, coin) => {
    acc.push(coin.coin_id);
    acc.push(coin.coin_type_legacy);
    acc.push(coin.coin_address_fungible);
    acc.push(coin.coin_name);
    acc.push(coin.coin_symbol);
    acc.push(coin.coin_defyapp_symbol);
    acc.push(coin.coin_decimals);
    acc.push(coin.coin_description);
    acc.push(coin.coin_logo_url);
    acc.push(coin.coingecko_id);
    acc.push(coin.coinmarketcap_id);
    acc.push(coin.is_graduated);
    acc.push(coin.bonding_curve_progress);
    return acc;
  }, []);
  return executeQuery<ICoin>(query, values, true);
};

export const updateCoin = async (coinId: string, coinData: Partial<ICoin>): Promise<ICoin[]> => {
  const query = `
    UPDATE coins
    SET coin_type_legacy = $1,
        coin_address_fungible = $2,
        coin_name = $3,
        coin_symbol = $4,
        coin_defyapp_symbol = $5,
        coin_decimals = $6,
        coin_description = $7,
        coin_logo_url = $8,
        coingecko_id = $9,
        coinmarketcap_id = $10,
        is_graduated = $11,
        bonding_curve_progress = $12,
        updated_at = NOW()
    WHERE coin_id = $13
    RETURNING *;
  `;
  return executeQuery<ICoin>(
    query,
    [
      coinData.coin_type_legacy,
      coinData.coin_address_fungible,
      coinData.coin_name,
      coinData.coin_symbol,
      coinData.coin_defyapp_symbol,
      coinData.coin_decimals,
      coinData.coin_description,
      coinData.coin_logo_url,
      coinData.coingecko_id,
      coinData.coinmarketcap_id,
      coinData.is_graduated,
      coinData.bonding_curve_progress,
      coinId,
    ],
    true
  );
};

export const getCoinById = async (coinId: string): Promise<ICoin[]> => {
  const query = `
    SELECT * FROM coins WHERE coin_id = $1;
  `;
  return executeQuery<ICoin>(query, [coinId]);
};

export const getAllCoins = async (): Promise<ICoin[]> => {
  const query = `
    SELECT * FROM coins;
  `;
  return executeQuery<ICoin>(query);
};

export default {
  addCoinIfNotExists,
  getAllCoins,
  getCoinById,
  updateCoin,
  addMultipleCoins,
  addMultipleCoinsOrUpdate,
};