import { executeQuery } from '../../utils/queryExecutor';


/*

-- Generated by the database client.
CREATE TABLE coins(
    coin_id varchar(255) NOT NULL,
    coin_type_legacy varchar(255),
    coin_address_fungible varchar(255),
    coin_name varchar(255),
    coin_symbol varchar(255),
    coin_defyapp_symbol varchar(255),
    coin_decimals integer NOT NULL,
    coin_description text,
    coin_logo_url varchar(255),
    price_usd numeric,
    coingecko_id varchar(255),
    coinmarketcap_id varchar(255),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    PRIMARY KEY(coin_id)
);

*/

const addCoinIfNotExists = async (coinData) => {
  const query = `
    INSERT INTO coins (coin_id, coin_type_legacy, coin_address_fungible, coin_name, coin_symbol, coin_defyapp_symbol, coin_decimals, coin_description, coin_logo_url, price_usd, coingecko_id, coinmarketcap_id)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
    ON CONFLICT (coin_id)
    DO NOTHING
    RETURNING *;
  `;
  return executeQuery(query, [
    coinData.coin_id,
    coinData.coin_type_legacy,
    coinData.coin_address_fungible,
    coinData.coin_name,
    coinData.coin_symbol,
    coinData.coin_defyapp_symbol,
    coinData.coin_decimals,
    coinData.coin_description,
    coinData.coin_logo_url,
    coinData.price_usd,
    coinData.coingecko_id,
    coinData.coinmarketcap_id,
  ], true);
}

const updateCoin = async (coinId, coinData) => {
  const query = `
    UPDATE coins
    SET coin_type_legacy = $1,
        coin_address_fungible = $2,
        coin_name = $3,
        coin_symbol = $4,
        coin_defyapp_symbol = $5,
        coin_decimals = $6,
        coin_description = $7,
        coin_logo_url = $8,
        price_usd = $9,
        coingecko_id = $10,
        coinmarketcap_id = $11,
        updated_at = NOW()
    WHERE coin_id = $12
    RETURNING *;
  `;
  return executeQuery(query, [
    coinData.coin_type_legacy,
    coinData.coin_address_fungible,
    coinData.coin_name,
    coinData.coin_symbol,
    coinData.coin_defyapp_symbol,
    coinData.coin_decimals,
    coinData.coin_description,
    coinData.coin_logo_url,
    coinData.price_usd,
    coinData.coingecko_id,
    coinData.coinmarketcap_id,
    coinId,
  ], true);
}

// get functions

const getCoinById = async (coinId) => {
  const query = `
    SELECT * FROM coins WHERE coin_id = $1;
  `;
  return executeQuery(query, [coinId]);
}

const getCoins = async () => {
  const query = `
    SELECT * FROM coins;
  `;
  return executeQuery(query);
}


export default {
  addCoinIfNotExists,
  updateCoin,
  getCoinById,
  getCoins,
}